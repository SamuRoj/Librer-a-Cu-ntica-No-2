import LibQuantum2 as Lib
import LibQuantum as Ql
import Complex_Lib as Cl
import Matrix_Lib as Ml
import unittest

class MyTestCase(unittest.TestCase):
    def test_something(self):
        print("Ejemplos")
        print("Probabilidad de una posición particular.")
        print(Lib.Probability(Lib.v1, 0))
        self.assertAlmostEqual(Lib.Probability(Lib.v1, 0), 0.69231)
        print(Lib.Probability(Lib.v1, 1))
        self.assertAlmostEqual(Lib.Probability(Lib.v1, 1), 0.30769)
        print("Ejemplo Número 2")
        print(Lib.Probability(Lib.v2, 0))
        self.assertAlmostEqual(Lib.Probability(Lib.v2, 0), 0.32051)
        print(Lib.Probability(Lib.v2, 1))
        self.assertAlmostEqual(Lib.Probability(Lib.v2, 1), 0.67949)
        print("Ejemplo Número 3")
        print(Lib.Probability(Lib.v3, 0))
        self.assertAlmostEqual(Lib.Probability(Lib.v3, 0), 0.69048)
        print(Lib.Probability(Lib.v3, 1))
        self.assertAlmostEqual(Lib.Probability(Lib.v3, 1), 0.30952)
        print("Ejemplo Número 4")
        print(Lib.Probability(Lib.v4, 0))
        self.assertAlmostEqual(Lib.Probability(Lib.v4, 0), 0.11017)
        print(Lib.Probability(Lib.v4, 1))
        self.assertAlmostEqual(Lib.Probability(Lib.v4, 1), 0.27119)
        print(Lib.Probability(Lib.v4, 2))
        self.assertAlmostEqual(Lib.Probability(Lib.v4, 2), 0.07627)
        print(Lib.Probability(Lib.v4, 3))
        self.assertAlmostEqual(Lib.Probability(Lib.v4, 3), 0.54237)
        print("Transición de un vector a otro")
        print(Cl.Print_Complex(Lib.Transition(Lib.v5, Lib.v6)))
        self.assertAlmostEqual(Lib.Transition(Lib.v5, Lib.v6), (0, -1))
        print("Ejemplo Número 2")
        print(Cl.Print_Complex(Lib.Transition(Lib.tsi, Lib.phi)))
        self.assertAlmostEqual(Lib.Transition(Lib.tsi, Lib.phi), (-0.02056, -0.13019))
        print("Ejemplo de la mediana de una matriz")
        Ml.print_matrix(Lib.Mean(Lib.omega, Lib.alpha))
        self.assertAlmostEqual(Lib.Mean(Lib.omega, Lib.alpha), (((0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0))))
        print("Ejemplo de la varianza de la matriz ")
        print(f"La varianza es: {Cl.Print_Complex(Lib.Variance(Lib.omega, Lib.alpha))}")
        self.assertAlmostEqual(Lib.Variance(Lib.omega, Lib.alpha), (8, 0))
        print("Dinámica de un sistema")
        print("Luego de plantear un sistema en las variables se obtuvo el estado final luego de aplicar las matrices unitarias")
        print(Lib.Dynamic(Lib.arrays, Lib.initial))
        self.assertAlmostEqual(Lib.Dynamic(Lib.arrays, Lib.initial), ((0.0, 0.0), (0.9999999999999998, 0.0)))
        print()
        print("Solución de los ejercicios propuestos.")
        print()
        print("Ejercicio 4.3.1")
        print(f"""Los estados a los que se puede transitar son:""")
        for i in Lib.vectors:
            print()
            Ml.print_vector(i)
        print()
        self.assertAlmostEqual(Lib.Vectors(Lib.Eigenvectors(Lib.matrix)), (((-0.70711, 0.0), (0.70711, 0.0)), ((0.70711, 0.0), (0.70711, 0.0))))
        print("Ejercicio 4.3.2")
        print("Las probabilidades de transitar a algún eigenvector son:")
        for i in Lib.vectors:
            print(Lib.ProbabilityVector(Lib.spin, i))
            self.assertAlmostEqual(Lib.ProbabilityVector(Lib.spin, i), 0.5)
        print()
        print("Ejercicio 4.4.1")
        print(Ml.Unitary(Lib.u1))
        print(Ml.Unitary(Lib.u2))
        print(Ml.Unitary(Lib.result))
        self.assertAlmostEqual(Ml.Unitary(Lib.u1), True)
        self.assertAlmostEqual(Ml.Unitary(Lib.u2), True)
        self.assertAlmostEqual(Ml.Unitary(Lib.result), True)
        print("Al ser todos los resultados True, se confirma que las matrices dadas y su producto son unitarias.")
        print()
        print("Ejercicio 4.4.2")
        print(Lib.Probability(Ql.Clicks(Lib.billiard, Lib.position, 3), 3))
        self.assertAlmostEqual(Lib.Probability(Ql.Clicks(Lib.billiard, Lib.position, 3), 3), 0)
        print("La probabilidad de que se encuentre en la posición 3 es de 0%")


if  __name__ == '__main__':
    print(unittest.main())